/* tslint:disable */
/* eslint-disable */
/**
 * Vendor Management API
 * API for managing vendor items
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Item,
  ItemCreate,
} from '../models/index';
import {
    ItemFromJSON,
    ItemToJSON,
    ItemCreateFromJSON,
    ItemCreateToJSON,
} from '../models/index';

export interface CreateItemRequest {
    itemCreate: ItemCreate;
}

export interface GetItemByIdRequest {
    id: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new item
     */
    async createItemRaw(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['itemCreate'] == null) {
            throw new runtime.RequiredError(
                'itemCreate',
                'Required parameter "itemCreate" was null or undefined when calling createItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateToJSON(requestParameters['itemCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Create a new item
     */
    async createItem(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.createItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all items
     */
    async getAllItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * Get all items
     */
    async getAllItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Item>> {
        const response = await this.getAllItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get item by ID
     */
    async getItemByIdRaw(requestParameters: GetItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getItemById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Get item by ID
     */
    async getItemById(requestParameters: GetItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.getItemByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
